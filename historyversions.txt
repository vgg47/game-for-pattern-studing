v1.1 	2018/04/20		Добавил класс игрока Player(имеет поля level, experience, gold, inventary, army), изменил структуру
армии. В классе Player  имеется словарь army, который хранит имеющиеся у игрока армии. Теперь чтобы обратиться к отряду
армии нужно ввести запрос <player_name>.army['<army_name>'].squads['<squad_name>']. Отряд есть list, то есть доступ к
юнитам осуществляется по числовому индексу. Метод create_army(self, _race, _factory, name_army) теперь имеет улучшенную
интуитивно понятную семантику.

v1.1.1	2018/05/02	Улучшил класс Player.  Теперь он содержит лист армий, а не словарь. Тоже самое с классом Army, отряды
теперь хранятся в листе. Имя армии теперь хранится в отдельном поле name_army, а отряды больше имени не имеют. Вынес код,
отвечающий за взаимодействие с пользователем, в отдельный файл dialogues.py и разбил на интуитивно понятные методы. Убрал
метод message из всех конструкторов персонажей. Теперь сообщения о создании выводит метод hire класса Army.  -----> 
ПАТТЕРН КОМПОНОВЩИК  <-----  Добавил метод count_attack в класс  Player. При вызове метода без аргументов он возвращает
суммарную атаку всех армии игрока. Так же можно вызывать с аргументом, где аргумент - конкретная армия. Тогда метод вернет
суммарный урон указанной армии. Метод устроен так, что он вызывает в нужных армиях метод count_attack класса Army, который
в свою очередь проходит по всем юнитам всех отрядов и суммирует их атаку.

v1.1.1.005 2018/05/05 Добавил уникальную способность под названием "Стена Щитов" юниту солдат. Способность увеличивает его
защиту на 80%, но при этом снижает скорость на 30%. Добавил армиям возможность прокачивания не в бою. Теперь каждая армия
имеет такие характеристики, как запас хода и боевой дух. В классе Player для их изменения добавлены два метода
set_number_of_steps и set_morale, которые принимают аргументом конкретную армию. В класс Аrmy добавлены одноименные методы,
которые изменяют данные характеристики при наличии у владельца достаточного количества золота. Пользователь сможет
развивать данные характеристики, если перейдет в раздел экономического развития армии, для чего был добавлен
соответствующий метод в dialogues.py. Стоимость апгрейдов и их величины хранятся в отдельном файле price.py. Максимальные
значения данных характеристик добавлены константами в файл army.py под названием max_morale и max_number_of_steps.

v1.1.1.021 2018/05/11 Улучшил в dialogues.py  метод develop_economy_of_army,
который отвечает за развитие экономической стороны армии. Внутри себя он
вызывает два метода: upgrade_number_of_steps и uprade_morale, которые 
отвечают за улучшение дальности хода и боевого духа. Код этих метод вынесен
из метода develop_economy_of_army. Улучшил работу метода hire_troops, теперь 
перед наймом юнитов, вызывается метод show_squad, класса Player, вызывающий
метод show_squad класс Army, который выводит количество юнитов каждого типа,
которые состоят в отряде в данный момент. Генерируемые замки не принадлежат
ни одному игроку.
Добавил файл map.py.  В нем генерируется карта и замки на ней.
Каждый элемент карты содержит две ячейки: в первой хранится замок находящийся на 
этом месте, а во второй герой. Метод
generate_castle создает карту с замками, где за генерирование замков отвечает
метод generate_castle, который в свою очередь вызывает методы generate_army
(метод создает рандомные армии) и  generate_defenses(метод должен 
создавать оборонительные сооружения, но пока что не делает это). Все замки
отличаются друг от друга по мощи, каждый последующий замок имеет большие
шансы стать сильнее предыдущего. Добавил парсер в main.py. Теперь при запуске 
файла main.py  можно параметром --size  указать число, которое будет размером
карты. Создал файл data.py, который хранит лист названий городов, из корого
берутся названия при генерации карты, а также словарь, который хранит типы
юнитов, для каждой из рас. В класс Unit добавил поле type, котороое хранит
тип юнита. Создал файл castle.py, который хранит класс Castle.
Castle имеет несколько полей: защита, гарнизон, владелец, название, защитные сооружения, золото.

v1.1.1.227 2018/05/25 Добавил в файл data.py информацию о максимальных
здоровье и защите персонажей, а так же стоимости их найма. Улучшил метод
hire_troops в файле dialogues.py, а так же написал метод crusade, который
отвечает за походы игрока. Внутри себя он вызывает три новых метода: move,
do_there и set_camp. Move - позволяет игроку перемещаться по карте.
Set_camp - метод класса Player, игрок разбивает лагерь в текущей клетке,
его армия исцеляется,
а он получает золото в количестве равном величине исцеления. Do_there -
метод реализующий логику взаимодействия игрока и клетки, в которой он 
находится. Если в клетке есть замок, то игроку выводится общая информация 
о замке и предлагается атаковать его. За начало битвы отвечает свежеиспеченный
метод start_fight из файла fight.py. Он предлагает выбрать игроку режим боя:
автоматический или ручной. В зависимости он этого вызывается метод auto_fight
или fight_ones_own. fight_ones_own при помощи метода choose_squad_for_fight,
который показывает информацию по отрядам и дает выбрать нужный, выбирает 
атакующий и обороняющийся отряды, после чего вызывает метод fight_squad, 
который сталкивает два отряда, оставляя в живых лишь одного из них.
СИСТЕМА БОЯ отрядов такова. Все атакующие юниты нападающего отряда действуют
по одному разу на случайного юнита отряда противника. Если юнит противника 
имеет радиус атаки больший, чем юнит игрока, то юнит противника атакует юнита
игрока. Логика взаимодействия юнитов заложена в метод action классов Support 
и DamageDealer. Бой продолжается пока одна из армий не будет истреблена.
Мертвые юниты,
отряды, армии удаляются из игры. В map.py помимо do_there и  move, добавил
отрисовку карты, которая реализуется методом show_map. В файл army.py добавил
методы для работы с отрядами: count_squad_attack, count_squad_defence,
count_squad_health, count_squad_potentional, show_squad. Добавил в класс Unit
пустой метод get_attack и переопределил их в классах DamageDealer и Support.

